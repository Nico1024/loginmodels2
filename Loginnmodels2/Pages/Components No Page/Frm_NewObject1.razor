@using System.Reflection
@using System.Text.Json
@inject IJSRuntime JsRuntime

<h3>Component1</h3>

   @CustomRender

<span id="resultJson">
    @resultRender
</span>

@code {
    [Parameter] public object generic_object { get; set; }
    [CascadingParameter] ModalParameters Parameters { get; set; }
    private List<PropertyInfo> Propiedades;
    private Type generic_object_type;

    private void RenderComponent()
    {
        CustomRender = CreateComponent();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CustomRender = CreateComponent();
    }

    private RenderFragment CustomRender { get; set; }
    private RenderFragment resultRender { get; set; }

    private RenderFragment CreateComponent() => builder =>
    {
        GetListOfProperties();
        int counter = 0;
        base.BuildRenderTree(builder);
        builder.OpenElement(++counter, "EditForm");
        builder.AddAttribute(++counter, "Model", generic_object);
        //builder.AddAttribute(++counter, "OnValidSubmit", new Action(async () => await SubmitForm()));
        builder.OpenElement(++counter, "table");
        builder.OpenElement(++counter, "tbody");
        builder.AddContent(++counter, "asdasdas");
        foreach (var item in Propiedades)
        {
            builder.OpenElement(++counter, "tr");

            builder.OpenElement(++counter, "td");
            builder.AddContent(++counter, item.Name);
            builder.CloseElement();

            builder.OpenElement(++counter, "td");
            builder.AddContent(++counter, item.PropertyType.ToString());
            builder.OpenElement(++counter, "input");

            switch (item.PropertyType.ToString())
            {
                case "System.String": builder.AddAttribute(++counter, "type", "text"); break;
                //case "System.String": builder.AddAttribute(++counter, "type", "text"); builder.AddAttribute(++counter, "bind-Value", generic_object.GetType().GetProperty(item.PropertyType.ToString())); break;
                case "System.Int32": builder.AddAttribute(++counter, "type", "number"); builder.AddAttribute(++counter, "@bind-Value", generic_object.GetType().GetProperty(item.PropertyType.ToString())); break;
                case "System.Int64": builder.AddAttribute(++counter, "type", "number"); builder.AddAttribute(++counter, "@bind-Value", generic_object.GetType().GetProperty(item.PropertyType.ToString())); break;
                    //case "System.DateTime": builder.AddAttribute(++counter, "type", "date"); builder.AddAttribute(++counter, "bind-Value", generic_object.GetType().GetProperty(item.PropertyType.ToString())); break;
                    //case "System.Boolean": builder.AddAttribute(++counter, "type", "checkbox"); builder.AddAttribute(++counter, "bind-Value", generic_object.GetType().GetProperty(item.PropertyType.ToString())); break;
            }

            builder.CloseElement();

            builder.CloseElement();
            builder.CloseElement();

        }

        builder.CloseElement();
        builder.CloseElement();
        builder.CloseElement();

        builder.OpenElement(++counter, "button");
        builder.AddAttribute(++counter, "type", "submit");
        builder.AddAttribute(++counter, "onclick", new Action(async () => await SubmitForm()));
        builder.AddContent(++counter, "Click");
        builder.CloseElement();

        builder.OpenElement(++counter, "span");
        builder.AddAttribute(++counter, "id", "resultJson");
        builder.CloseElement();
    };
    private RenderFragment ShowResult(String result) => builder =>
    {
        base.BuildRenderTree(builder);
        builder.AddContent(0, result);
    };
    private async Task SubmitForm()
    {
        resultRender = ShowResult(JsonSerializer.Serialize(generic_object));
        //await JsRuntime.InvokeVoidAsync("setElementTextById", "resultJson","-->"+ JsonSerializer.Serialize(generic_object));
    }

    private void GetListOfProperties()
    {
        Propiedades = new List<PropertyInfo>();
        if (generic_object == null)
        {

            var a = Parameters.Get<object>("Generic").GetType().GetProperties();

            foreach (var b in a)
            {
                Propiedades.Add(b);
            }
            generic_object_type = Parameters.Get<object>("Generic").GetType();
            generic_object = Parameters.Get<object>("Generic");
        }
        else
        {
            generic_object_type = generic_object.GetType();
            var a = generic_object.GetType().GetProperties();

            foreach (var b in a)
            {
                Propiedades.Add(b);
            }
        }

    }
}
