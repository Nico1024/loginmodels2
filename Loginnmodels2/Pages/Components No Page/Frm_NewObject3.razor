@* got this sample from:

    https://stackoverflow.com/questions/57426177/blazor-how-to-create-dynamic-form/57459012#57459012

    and

    https://visualstudiomagazine.com/articles/2018/12/01/blazor-templated-components.aspx
*@

@typeparam TItem

@using Loginnmodels2.Data
@using Microsoft.AspNetCore.Components.CompilerServices
@using Microsoft.AspNetCore.Components


<h3>Dynamic form</h3>
<EditForm Model="@Context">
    @foreach (var field in FieldIdentifiers)
    {
        if (field.Value == "string")
        {
            @field.Key
            @CreateComponent(field.Key);
            <br />
        }
    }

    <h3>Statically declared</h3>

</EditForm>

@code {
    //[Parameter] public DataX DataContext { get; set; }
    [Parameter] public Dictionary<string, string> FieldIdentifiers { get; set; } = new Dictionary<string, string> { { "Name", "string" }, { "Phone", "string" } };
    [Parameter] public TItem Context { get; set; }

    public RenderFragment CreateComponent(string fld) => builder =>
    {
        builder.OpenComponent(0, typeof(InputText));
        
    // Get the initial property value
    var propInfoValue = typeof(TItem).GetProperty(fld);
        var s = propInfoValue.GetValue(Context);
        builder.AddAttribute(1, "Value", s);

    // Create the handler for ValueChanged. I use reflection to the value.
    builder.AddAttribute(3, "ValueChanged",
        RuntimeHelpers.TypeCheck<EventCallback<System.String>>
        (EventCallback.Factory.Create<System.String>(this,
        EventCallback.Factory.CreateInferred(this,
        __value => propInfoValue.SetValue(Context, __value), (string)propInfoValue.GetValue(Context)))));

    // Create an expression to set the ValueExpression-attribute.
    var constant = System.Linq.Expressions.Expression.Constant(Context, typeof(TItem));
        var exp = System.Linq.Expressions.MemberExpression.Property(constant, fld);
        var lamb = System.Linq.Expressions.Expression.Lambda<Func<string>>(exp);

        builder.AddAttribute(4, "ValueExpression", lamb);

        builder.CloseComponent();
    };


}